@using DynDNS.Core.Abstractions.Models
@using Microsoft.AspNetCore.Components.Forms
@using DynDNS.Web.Validation
@implements IDisposable
@inject OverviewModel OverviewModel

<MudCard>
    <MudCardHeader>
        <MudStack Row AlignItems="AlignItems.Center" Class="flex-auto">
            <MudText Typo="Typo.h6" Color="Color.Primary">@DomainBinding.Domain</MudText>
            <MudSpacer />
            <MudIconButton Icon="@Icons.Material.Filled.DeleteForever" OnClick="@(() => OverviewModel.DeleteDomainBinding(DomainBinding))" />
        </MudStack>
    </MudCardHeader>

    <MudCardContent>
        <MudDivider DividerType="DividerType.Middle" Class="my-4" />
        <MudGrid Spacing="0" Class="align-center">
            @if (!subdomains.Any() && addModel is null)
            {
                <MudItem sm="12">
                    <MudText Align="Align.Center">No subdomains configured.</MudText>
                </MudItem>
            }

            @foreach (var subdomain in subdomains)
            {
                <MudItem sm="2" Style="text-align: end">
                    <MudText Color="Color.Primary">@subdomain.Name</MudText>
                </MudItem>

                <MudItem sm="2">
                    <MudText>.@DomainBinding.Domain</MudText>
                </MudItem>

                <MudItem sm="2">
                    <MudSwitch Color="Color.Primary" Label="Bind IPv4"
                               @bind-Value="@subdomain.BindIPv4" @bind-Value:after="@(() => OverviewModel.UpdateSubdomain(subdomain))"/>
                </MudItem>

                <MudItem sm="2">
                    <MudSwitch Color="Color.Primary" Label="Bind IPv6"
                               @bind-Value="@subdomain.BindIPv6" @bind-Value:after="@(() => OverviewModel.UpdateSubdomain(subdomain))"/>
                </MudItem>

                <MudItem sm="4" Style="text-align: end">
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="@(() => OverviewModel.RemoveSubdomain(subdomain))"/>
                </MudItem>
            }

            @if (addModel is not null && editContext is not null)
            {
                <CascadingValue Value="editContext">
                    <SwallowValidationProvider />
                    <MudItem sm="2">
                        <MudTextField For="@(() => addModel.Name)" @bind-Value="@addModel.Name" @bind-Value:after="@(() => editContext.Validate())"/>
                    </MudItem>

                    <MudItem sm="6">
                        <MudText>.@DomainBinding.Domain</MudText>
                    </MudItem>

                    <MudItem sm="4" Style="text-align: end">
                        <MudIconButton Icon="@Icons.Material.Filled.Cancel" OnClick="@CancelAddSubdomain"/>
                        <MudIconButton Icon="@Icons.Material.Filled.Save" Disabled="@(!editContext.Validate())" Color="Color.Primary" OnClick="@AddSubdomain"/>
                    </MudItem>
                </CascadingValue>

            }
        </MudGrid>
    </MudCardContent>
    <MudCardActions>
        <MudStack Row AlignItems="AlignItems.Center">
            <MudButton Color="Color.Primary" Disabled="@(addModel is not null)" OnClick="@ShowAddSubdomain">
                Add subdomain
            </MudButton>
        </MudStack>
    </MudCardActions>
</MudCard>

@code {

    private List<SubdomainModel> subdomains = [];
    private EditContext? editContext;
    private SubdomainModel? addModel = null;

    [Parameter, EditorRequired]
    public required DomainBindingModel DomainBinding { get; set; }

    protected override void OnParametersSet()
    {
        subdomains = OverviewModel.Subdomains.Where(s => s.DomainBindingId == DomainBinding.Id).ToList();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            OverviewModel.OnSubdomainAdded += OnSubdomainAdded;
            OverviewModel.OnSubdomainRemoved += OnSubdomainRemoved;
        }
    }

    private void OnSubdomainAdded(object? sender, SubdomainModel e)
    {
        if (e.DomainBindingId == DomainBinding.Id)
        {
            subdomains.Add(e);
            _ = InvokeAsync(StateHasChanged);
        }
    }

    private void OnSubdomainRemoved(object? sender, SubdomainModel e)
    {
        subdomains.Remove(e);
        _ = InvokeAsync(StateHasChanged);
    }

    private void ShowAddSubdomain()
    {
        addModel = new SubdomainModel { DomainBindingId = DomainBinding.Id };
        editContext = new EditContext(addModel);

        StateHasChanged();
    }

    private async Task AddSubdomain()
    {
        if (addModel is null)
        {
            return;
        }

        await OverviewModel.AddSubdomain(addModel);
        addModel = null;
    }

    private void CancelAddSubdomain()
    {
        addModel = null;
        StateHasChanged();
    }

    public void Dispose()
    {
        OverviewModel.OnSubdomainAdded -= OnSubdomainRemoved;
        OverviewModel.OnSubdomainRemoved -= OnSubdomainRemoved;
    }

}
