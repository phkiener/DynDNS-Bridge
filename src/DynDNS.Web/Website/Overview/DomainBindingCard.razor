@implements IDisposable
@inject OverviewModel OverviewModel

<MudCard>
    <MudCardHeader>
        <MudStack Row AlignItems="AlignItems.Center" Class="flex-auto">
            <MudText Typo="Typo.h6" Color="Color.Primary">@DomainBinding.Domain</MudText>
            <MudSpacer />

            @if (providerConfiguration.Provider is not null)
            {
                <MudIconButton Color="Color.Primary" Icon="@Icons.Material.Filled.Upload" OnClick="@(() => OverviewModel.ApplyBinding(DomainBinding))" />
            }

            <MudIconButton Icon="@Icons.Material.Filled.DeleteForever" OnClick="@(() => OverviewModel.DeleteDomainBinding(DomainBinding))" />
        </MudStack>
    </MudCardHeader>

    <MudCardContent>
        @if (isEditingProvider)
        {
            var providers = OverviewModel.AvailableProviders;

            <MudGrid Spacing="2" Class="align-center">
                <MudItem sm="1">
                    <MudText Color="Color.Primary">Provider</MudText>
                </MudItem>

                <MudItem sm="11">
                    @if (providers is [])
                    {
                        <MudText>No provider available!</MudText>
                    }
                    else
                    {
                        <MudSelect @bind-Value="@editModel.Provider" @bind-Value:after="@UpdateSelectedProvider">
                            @foreach (var provider in providers)
                            {
                                <MudSelectItem Value="provider">@provider</MudSelectItem>
                            }
                        </MudSelect>
                    }
                </MudItem>

                @foreach (var parameter in editModel.RequiredParameters)
                {
                    <MudItem sm="1">
                        <MudText Color="Color.Primary">@parameter</MudText>
                    </MudItem>

                    <MudItem sm="11">
                        @if (editModel.SuppliedParameters.ContainsKey(parameter))
                        {
                            <MudTextField @bind-Value="@editModel.SuppliedParameters[parameter]" />
                        }
                    </MudItem>
                }

                <MudItem sm="12">
                    <MudStack Row AlignItems="AlignItems.Center" Class="mt-4">
                        <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="@UpdateProviderConfiguration">Save</MudButton>
                        <MudButton Variant="Variant.Text" OnClick="@CancelEditProvider">Cancel</MudButton>
                    </MudStack>
                </MudItem>
            </MudGrid>
        }
        else if (providerConfiguration.Provider is null)
        {
            <MudText Inline>No provider configured.</MudText>
            <MudIconButton Color="Color.Primary" Icon="@Icons.Material.Filled.Edit" OnClick="@ShowEditProvider" />
        }
        else
        {
            <MudGrid Spacing="1" Class="align-center">
                <MudItem sm="1">
                    <MudText Color="Color.Primary">Provider</MudText>
                </MudItem>

                <MudItem sm="11">
                    @providerConfiguration.Provider

                    <MudIconButton Color="Color.Primary" Icon="@Icons.Material.Filled.Edit" OnClick="@ShowEditProvider" />
                </MudItem>

                @foreach (var parameter in providerConfiguration.RequiredParameters)
                {
                    <MudItem sm="1">
                        <MudText Color="Color.Primary">@parameter</MudText>
                    </MudItem>

                    <MudItem sm="11">
                        @providerConfiguration.SuppliedParameters[parameter]
                    </MudItem>
                }
            </MudGrid>
        }

        <MudDivider DividerType="DividerType.Middle" Class="my-4"/>

        <MudGrid Spacing="0" Class="align-center">
            @if (!subdomains.Any() && !isAdding)
            {
                <MudItem sm="12">
                    <MudText Align="Align.Center">No subdomains configured.</MudText>
                </MudItem>
            }

            @foreach (var subdomain in subdomains)
            {
                <MudItem sm="2" Style="text-align: end">
                    <MudText Color="Color.Primary">@subdomain.Name</MudText>
                </MudItem>

                <MudItem sm="2">
                    <MudText>.@DomainBinding.Domain</MudText>
                </MudItem>

                <MudItem sm="2">
                    <MudSwitch Color="Color.Primary" Label="Bind IPv4"
                               @bind-Value="@subdomain.BindIPv4" @bind-Value:after="@(() => OverviewModel.UpdateSubdomain(subdomain))"/>
                </MudItem>

                <MudItem sm="2">
                    <MudSwitch Color="Color.Primary" Label="Bind IPv6"
                               @bind-Value="@subdomain.BindIPv6" @bind-Value:after="@(() => OverviewModel.UpdateSubdomain(subdomain))"/>
                </MudItem>

                <MudItem sm="4" Style="text-align: end">
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="@(() => OverviewModel.RemoveSubdomain(subdomain))"/>
                </MudItem>
            }

            @if (isAdding)
            {
                <EditForm Model="addModel" Style="display: contents" OnValidSubmit="@AddSubdomain">
                    <SwallowValidationProvider/>
                    <MudItem sm="2">
                        <MudTextField For="@(() => addModel.Name)" @bind-Value="@addModel.Name"/>
                    </MudItem>

                    <MudItem sm="6">
                        <MudText>.@DomainBinding.Domain</MudText>
                    </MudItem>

                    <MudItem sm="4" Style="text-align: end">
                        <MudIconButton Icon="@Icons.Material.Filled.Cancel" OnClick="@CancelAddSubdomain"/>
                        <MudIconButton Icon="@Icons.Material.Filled.Save" Color="Color.Primary" ButtonType="ButtonType.Submit"/>
                    </MudItem>
                </EditForm>

            }
        </MudGrid>
    </MudCardContent>
    <MudCardActions>
        <MudStack Row AlignItems="AlignItems.Center">
            <MudButton Color="Color.Primary" Disabled="@isAdding" OnClick="@ShowAddSubdomain">
                Add subdomain
            </MudButton>
        </MudStack>
    </MudCardActions>
</MudCard>

@code {

    private List<SubdomainModel> subdomains = [];
    private ProviderConfigurationModel providerConfiguration = null!;

    private bool isEditingProvider = false;
    private ProviderConfigurationModel editModel = null!;

    private bool isAdding = false;
    private SubdomainModel addModel = null!;

    [Parameter, EditorRequired]
    public required DomainBindingModel DomainBinding { get; set; }

    protected override void OnParametersSet()
    {
        addModel = new SubdomainModel { DomainBindingId = DomainBinding.Id };
        subdomains = OverviewModel.Subdomains.Where(s => s.DomainBindingId == DomainBinding.Id).ToList();

        editModel = new ProviderConfigurationModel { DomainBindingId = DomainBinding.Id };
        providerConfiguration = OverviewModel.ProviderConfigurations.Single(s => s.DomainBindingId == DomainBinding.Id);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            OverviewModel.OnSubdomainAdded += OnSubdomainAdded;
            OverviewModel.OnSubdomainRemoved += OnSubdomainRemoved;
            OverviewModel.OnProviderConfigurationChanged += OnProviderConfigurationChanged;
        }
    }

    private void OnSubdomainAdded(object? sender, SubdomainModel e)
    {
        if (e.DomainBindingId == DomainBinding.Id)
        {
            subdomains.Add(e);
            _ = InvokeAsync(StateHasChanged);
        }
    }

    private void OnSubdomainRemoved(object? sender, SubdomainModel e)
    {
        subdomains.Remove(e);
        _ = InvokeAsync(StateHasChanged);
    }

    private void OnProviderConfigurationChanged(object? sender, ProviderConfigurationModel e)
    {
        if (providerConfiguration.DomainBindingId == e.DomainBindingId)
        {
            providerConfiguration = e;
            _ = InvokeAsync(StateHasChanged);
        }
    }

    private void ShowAddSubdomain()
    {
        isAdding = true;
        addModel = new SubdomainModel { DomainBindingId = DomainBinding.Id };

        StateHasChanged();
    }

    private async Task AddSubdomain()
    {
        await OverviewModel.AddSubdomain(addModel);
        isAdding = false;
    }

    private void CancelAddSubdomain()
    {
        isAdding = false;
        StateHasChanged();
    }

    public void Dispose()
    {
        OverviewModel.OnSubdomainAdded -= OnSubdomainRemoved;
        OverviewModel.OnSubdomainRemoved -= OnSubdomainRemoved;
        OverviewModel.OnProviderConfigurationChanged -= OnProviderConfigurationChanged;
    }

    private void ShowEditProvider()
    {
        isEditingProvider = true;
        editModel = new ProviderConfigurationModel
        {
            DomainBindingId = providerConfiguration.DomainBindingId,
            Provider = providerConfiguration.Provider,
            RequiredParameters = providerConfiguration.RequiredParameters,
            SuppliedParameters = new Dictionary<string, string>(providerConfiguration.SuppliedParameters)
        };

        StateHasChanged();
    }

    private async Task UpdateSelectedProvider()
    {
        await OverviewModel.UpdateForProvider(editModel);
        StateHasChanged();
    }

    private void CancelEditProvider()
    {
        isEditingProvider = false;
        StateHasChanged();
    }

    private async Task UpdateProviderConfiguration()
    {
        await OverviewModel.UpdateProviderConfiguration(editModel);
        isEditingProvider = false;
        StateHasChanged();
    }

}
