@page "/"
@using DynDNS.Core.Abstractions.Models
@using Microsoft.AspNetCore.Components.Forms
@using DynDNS.Web.Validation
@implements IDisposable
@inject OverviewModel OverviewModel

<MudStack>
    @foreach (var domainBinding in domainBindings)
    {
        <DomainBindingCard DomainBinding="domainBinding" />
    }

    @if (addModel is not null && editContext is not null)
    {
        <MudCard>
            <MudCardHeader>
                <CascadingValue Value="editContext">
                    <SwallowValidationProvider />
                    <MudStack Row AlignItems="AlignItems.Center" Class="flex-auto">
                        <MudTextField Label="Domain" For="@(() => addModel.Domain)"
                                      @bind-Value="@addModel.Domain" @bind-Value:after="@(() => editContext.Validate())" />
                        <MudSpacer/>
                        <MudIconButton Icon="@Icons.Material.Filled.Cancel" OnClick="@CancelAddDomainBinding"/>
                        <MudIconButton Icon="@Icons.Material.Filled.Save" Disabled="@(editContext!.Validate())" Color="Color.Primary" OnClick="@AddDomainBinding"/>
                    </MudStack>
                </CascadingValue>
            </MudCardHeader>
        </MudCard>
    }
    else
    {
        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="@ShowAddDomainBinding" Class="align-self-start">
            Add domain
        </MudButton>
    }
</MudStack>

@code {

    private List<DomainBindingModel> domainBindings = [];
    private EditContext? editContext;
    private DomainBindingModel? addModel = null;

    protected override async Task OnInitializedAsync()
    {
        await OverviewModel.InitializeAsync();

        domainBindings = OverviewModel.DomainBindings.ToList();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            OverviewModel.OnDomainBindingAdded += OnDomainBindingAdded;
            OverviewModel.OnDomainBindingRemoved += OnDomainBindingRemoved;
        }
    }

    private void OnDomainBindingRemoved(object? sender, DomainBindingModel model)
    {
        domainBindings.Remove(model);
        _ = InvokeAsync(StateHasChanged);
    }

    private void OnDomainBindingAdded(object? sender, DomainBindingModel model)
    {
        domainBindings.Add(model);
        _ = InvokeAsync(StateHasChanged);
    }

    private void ShowAddDomainBinding()
    {
        addModel = new DomainBindingModel { Id = new DomainBindingId()};
        editContext = new EditContext(addModel);

        StateHasChanged();
    }

    private async Task AddDomainBinding()
    {
        if (addModel is null)
        {
            return;
        }

        await OverviewModel.AddDomainBinding(addModel);
        addModel = null;
    }

    private void CancelAddDomainBinding()
    {
        addModel = null;
        StateHasChanged();
    }

    public void Dispose()
    {
        OverviewModel.OnDomainBindingAdded -= OnDomainBindingAdded;
        OverviewModel.OnDomainBindingRemoved -= OnDomainBindingRemoved;
    }

}
