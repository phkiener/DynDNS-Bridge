@page "/"
@using DynDNS.Core.Abstractions.Models
@implements IDisposable
@inject OverviewModel OverviewModel

<MudStack>
    @foreach (var domainBinding in domainBindings)
    {
        <DomainBindingCard DomainBinding="domainBinding" />
    }

    @if (isAdding)
    {
        <MudCard>
            <MudCardHeader>
                <EditForm Model="addModel" Style="display: contents" OnValidSubmit="@AddDomainBinding">
                    <SwallowValidationProvider />
                    <MudStack Row AlignItems="AlignItems.Center" Class="flex-auto">
                        <MudTextField Label="Domain" For="@(() => addModel.Domain)" @bind-Value="@addModel.Domain"/>
                        <MudSpacer/>
                        <MudIconButton Icon="@Icons.Material.Filled.Cancel" OnClick="@CancelAddDomainBinding"/>
                        <MudIconButton Icon="@Icons.Material.Filled.Save" Color="Color.Primary" ButtonType="ButtonType.Submit" />
                    </MudStack>
                </EditForm>
            </MudCardHeader>
        </MudCard>
    }
    else
    {
        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="@ShowAddDomainBinding" Class="align-self-start">
            Add domain
        </MudButton>
    }
</MudStack>

@code {

    private List<DomainBindingModel> domainBindings = [];
    private bool isAdding = false;
    private DomainBindingModel addModel = new();

    protected override async Task OnInitializedAsync()
    {
        await OverviewModel.InitializeAsync();

        domainBindings = OverviewModel.DomainBindings.ToList();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            OverviewModel.OnDomainBindingAdded += OnDomainBindingAdded;
            OverviewModel.OnDomainBindingRemoved += OnDomainBindingRemoved;
        }
    }

    private void OnDomainBindingRemoved(object? sender, DomainBindingModel model)
    {
        domainBindings.Remove(model);
        _ = InvokeAsync(StateHasChanged);
    }

    private void OnDomainBindingAdded(object? sender, DomainBindingModel model)
    {
        domainBindings.Add(model);
        _ = InvokeAsync(StateHasChanged);
    }

    private void ShowAddDomainBinding()
    {
        addModel = new DomainBindingModel { Id = new DomainBindingId()};
        isAdding = true;

        StateHasChanged();
    }

    private async Task AddDomainBinding()
    {
        await OverviewModel.AddDomainBinding(addModel);
        isAdding = false;

        StateHasChanged();
    }

    private void CancelAddDomainBinding()
    {
        isAdding = false;
        StateHasChanged();
    }

    public void Dispose()
    {
        OverviewModel.OnDomainBindingAdded -= OnDomainBindingAdded;
        OverviewModel.OnDomainBindingRemoved -= OnDomainBindingRemoved;
    }

}
